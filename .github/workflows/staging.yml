name: Build and deploy staging

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
      - name: Install dependencies
        run: pnpm install

      - name: Cache turbo build cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ hashFiles('**/turbo.json') }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-

  checks:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Audit dependencies
        run: pnpm audit --audit-level=critical

  check_formatting:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Check formatting
        run: pnpm run format:check

  check_types:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Check types
        run: pnpm run check-types

  check_linter:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Check linter
        run: pnpm run lint

  check_unit_tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Check unit tests
        run: pnpm run test

  build_push_docker_image_dialog:
    name: Build and push docker image telli-dialog
    runs-on: ubuntu-latest
    needs: [checks, check_formatting, check_types, check_linter, check_unit_tests]
    timeout-minutes: 10
    if: |
      startsWith(github.head_ref, 'ci/') ||
      github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to IONOS Container Registry
        uses: docker/login-action@v3
        with:
          registry: telli.cr.de-fra.ionos.com
          username: github-push
          password: ${{ secrets.IONOS_REGISTRY_TOKEN_GITHUB_PUSH }}

      - name: Build and push
        uses: docker/build-push-action@v5
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          context: .
          file: apps/dialog/Dockerfile
          secret-envs: |
            SENTRY_AUTH_TOKEN=SENTRY_AUTH_TOKEN
            SENTRY_ORG=SENTRY_ORG
            SENTRY_PROJECT=SENTRY_PROJECT
          build-args: CI=${CI}
          tags: telli.cr.de-fra.ionos.com/telli/chatbot:${{ github.sha }}
          push: true

  build_push_docker_image_admin:
    name: Build and push docker image telli-admin
    runs-on: ubuntu-latest
    needs: [checks, check_formatting, check_types, check_linter, check_unit_tests]
    timeout-minutes: 10
    if: |
      startsWith(github.head_ref, 'ci/') ||
      github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to IONOS Container Registry
        uses: docker/login-action@v3
        with:
          registry: telli.cr.de-fra.ionos.com
          username: github-push
          password: ${{ secrets.IONOS_REGISTRY_TOKEN_GITHUB_PUSH }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/admin/Dockerfile
          tags: telli.cr.de-fra.ionos.com/telli/admin:${{ github.sha }}
          push: true

  deploy_apps:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: [build_push_docker_image_dialog, build_push_docker_image_admin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_FILE }}
          context: ''

      - name: Update Kubernetes deployment
        run: |
          echo "Updating Kubernetes deployment with image tag $COMMIT_HASH"
          kubectl set image deployment/telli-dialog-stage \
            telli-dialog-stage=telli.cr.de-fra.ionos.com/telli/chatbot:$COMMIT_HASH -n telli-stage
          kubectl set image deployment/telli-admin-stage \
            telli-admin-stage=telli.cr.de-fra.ionos.com/telli/admin:$COMMIT_HASH -n telli-stage

      - name: Wait for rollout to complete
        run: |
          echo "Waiting for rollout to complete"
          kubectl rollout status deployment/telli-dialog-stage -n telli-stage
